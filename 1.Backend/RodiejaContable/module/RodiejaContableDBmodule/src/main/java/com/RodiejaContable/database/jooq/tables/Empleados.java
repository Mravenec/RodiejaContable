/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.tables.TransaccionesFinancieras.TransaccionesFinancierasPath;
import com.RodiejaContable.database.jooq.tables.records.EmpleadosRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Empleados extends TableImpl<EmpleadosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sistema_vehicular.empleados</code>
     */
    public static final Empleados EMPLEADOS = new Empleados();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmpleadosRecord> getRecordType() {
        return EmpleadosRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.empleados.id</code>.
     */
    public final TableField<EmpleadosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.empleados.nombre</code>.
     */
    public final TableField<EmpleadosRecord, String> NOMBRE = createField(DSL.name("nombre"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.empleados.activo</code>.
     */
    public final TableField<EmpleadosRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sistema_vehicular.empleados.fecha_creacion</code>.
     */
    public final TableField<EmpleadosRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Empleados(Name alias, Table<EmpleadosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Empleados(Name alias, Table<EmpleadosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sistema_vehicular.empleados</code> table
     * reference
     */
    public Empleados(String alias) {
        this(DSL.name(alias), EMPLEADOS);
    }

    /**
     * Create an aliased <code>sistema_vehicular.empleados</code> table
     * reference
     */
    public Empleados(Name alias) {
        this(alias, EMPLEADOS);
    }

    /**
     * Create a <code>sistema_vehicular.empleados</code> table reference
     */
    public Empleados() {
        this(DSL.name("empleados"), null);
    }

    public <O extends Record> Empleados(Table<O> path, ForeignKey<O, EmpleadosRecord> childPath, InverseForeignKey<O, EmpleadosRecord> parentPath) {
        super(path, childPath, parentPath, EMPLEADOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EmpleadosPath extends Empleados implements Path<EmpleadosRecord> {
        public <O extends Record> EmpleadosPath(Table<O> path, ForeignKey<O, EmpleadosRecord> childPath, InverseForeignKey<O, EmpleadosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EmpleadosPath(Name alias, Table<EmpleadosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EmpleadosPath as(String alias) {
            return new EmpleadosPath(DSL.name(alias), this);
        }

        @Override
        public EmpleadosPath as(Name alias) {
            return new EmpleadosPath(alias, this);
        }

        @Override
        public EmpleadosPath as(Table<?> alias) {
            return new EmpleadosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public Identity<EmpleadosRecord, Integer> getIdentity() {
        return (Identity<EmpleadosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EmpleadosRecord> getPrimaryKey() {
        return Keys.KEY_EMPLEADOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmpleadosRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_EMPLEADOS_NOMBRE);
    }

    private transient TransaccionesFinancierasPath _transaccionesFinancieras;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.transacciones_financieras</code> table
     */
    public TransaccionesFinancierasPath transaccionesFinancieras() {
        if (_transaccionesFinancieras == null)
            _transaccionesFinancieras = new TransaccionesFinancierasPath(this, null, Keys.TRANSACCIONES_FINANCIERAS_IBFK_2.getInverseKey());

        return _transaccionesFinancieras;
    }

    @Override
    public Empleados as(String alias) {
        return new Empleados(DSL.name(alias), this);
    }

    @Override
    public Empleados as(Name alias) {
        return new Empleados(alias, this);
    }

    @Override
    public Empleados as(Table<?> alias) {
        return new Empleados(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Empleados rename(String name) {
        return new Empleados(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Empleados rename(Name name) {
        return new Empleados(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Empleados rename(Table<?> name) {
        return new Empleados(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Empleados where(Condition condition) {
        return new Empleados(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Empleados where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Empleados where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Empleados where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Empleados where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Empleados where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Empleados where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Empleados where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Empleados whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Empleados whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
