/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.tables.Modelos.ModelosPath;
import com.RodiejaContable.database.jooq.tables.records.MarcasRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Marcas extends TableImpl<MarcasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sistema_vehicular.marcas</code>
     */
    public static final Marcas MARCAS = new Marcas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarcasRecord> getRecordType() {
        return MarcasRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.marcas.id</code>.
     */
    public final TableField<MarcasRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.marcas.nombre</code>.
     */
    public final TableField<MarcasRecord, String> NOMBRE = createField(DSL.name("nombre"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.marcas.activo</code>.
     */
    public final TableField<MarcasRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sistema_vehicular.marcas.fecha_creacion</code>.
     */
    public final TableField<MarcasRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Marcas(Name alias, Table<MarcasRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Marcas(Name alias, Table<MarcasRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sistema_vehicular.marcas</code> table reference
     */
    public Marcas(String alias) {
        this(DSL.name(alias), MARCAS);
    }

    /**
     * Create an aliased <code>sistema_vehicular.marcas</code> table reference
     */
    public Marcas(Name alias) {
        this(alias, MARCAS);
    }

    /**
     * Create a <code>sistema_vehicular.marcas</code> table reference
     */
    public Marcas() {
        this(DSL.name("marcas"), null);
    }

    public <O extends Record> Marcas(Table<O> path, ForeignKey<O, MarcasRecord> childPath, InverseForeignKey<O, MarcasRecord> parentPath) {
        super(path, childPath, parentPath, MARCAS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MarcasPath extends Marcas implements Path<MarcasRecord> {
        public <O extends Record> MarcasPath(Table<O> path, ForeignKey<O, MarcasRecord> childPath, InverseForeignKey<O, MarcasRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MarcasPath(Name alias, Table<MarcasRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MarcasPath as(String alias) {
            return new MarcasPath(DSL.name(alias), this);
        }

        @Override
        public MarcasPath as(Name alias) {
            return new MarcasPath(alias, this);
        }

        @Override
        public MarcasPath as(Table<?> alias) {
            return new MarcasPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public Identity<MarcasRecord, Integer> getIdentity() {
        return (Identity<MarcasRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarcasRecord> getPrimaryKey() {
        return Keys.KEY_MARCAS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MarcasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MARCAS_NOMBRE);
    }

    private transient ModelosPath _modelos;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.modelos</code> table
     */
    public ModelosPath modelos() {
        if (_modelos == null)
            _modelos = new ModelosPath(this, null, Keys.MODELOS_IBFK_1.getInverseKey());

        return _modelos;
    }

    @Override
    public Marcas as(String alias) {
        return new Marcas(DSL.name(alias), this);
    }

    @Override
    public Marcas as(Name alias) {
        return new Marcas(alias, this);
    }

    @Override
    public Marcas as(Table<?> alias) {
        return new Marcas(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Marcas rename(String name) {
        return new Marcas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Marcas rename(Name name) {
        return new Marcas(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Marcas rename(Table<?> name) {
        return new Marcas(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Marcas where(Condition condition) {
        return new Marcas(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Marcas where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Marcas where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Marcas where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Marcas where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Marcas where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Marcas where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Marcas where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Marcas whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Marcas whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
