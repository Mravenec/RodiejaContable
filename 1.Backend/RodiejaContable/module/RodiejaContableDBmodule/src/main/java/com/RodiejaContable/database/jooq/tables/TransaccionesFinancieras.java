/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Indexes;
import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.enums.TransaccionesFinancierasEstado;
import com.RodiejaContable.database.jooq.tables.Empleados.EmpleadosPath;
import com.RodiejaContable.database.jooq.tables.Generaciones.GeneracionesPath;
import com.RodiejaContable.database.jooq.tables.HistorialTransacciones.HistorialTransaccionesPath;
import com.RodiejaContable.database.jooq.tables.InventarioRepuestos.InventarioRepuestosPath;
import com.RodiejaContable.database.jooq.tables.TiposTransacciones.TiposTransaccionesPath;
import com.RodiejaContable.database.jooq.tables.Vehiculos.VehiculosPath;
import com.RodiejaContable.database.jooq.tables.records.TransaccionesFinancierasRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransaccionesFinancieras extends TableImpl<TransaccionesFinancierasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.transacciones_financieras</code>
     */
    public static final TransaccionesFinancieras TRANSACCIONES_FINANCIERAS = new TransaccionesFinancieras();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransaccionesFinancierasRecord> getRecordType() {
        return TransaccionesFinancierasRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.transacciones_financieras.id</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.codigo_transaccion</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, String> CODIGO_TRANSACCION = createField(DSL.name("codigo_transaccion"), SQLDataType.VARCHAR(20).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.fecha</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, LocalDate> FECHA = createField(DSL.name("fecha"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.transacciones_financieras.dia</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Byte> DIA = createField(DSL.name("dia"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>sistema_vehicular.transacciones_financieras.mes</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Byte> MES = createField(DSL.name("mes"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>sistema_vehicular.transacciones_financieras.anio</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Short> ANIO = createField(DSL.name("anio"), SQLDataType.SMALLINT, this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.tipo_transaccion_id</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Integer> TIPO_TRANSACCION_ID = createField(DSL.name("tipo_transaccion_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.empleado_id</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Integer> EMPLEADO_ID = createField(DSL.name("empleado_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.vehiculo_id</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Integer> VEHICULO_ID = createField(DSL.name("vehiculo_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.repuesto_id</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Integer> REPUESTO_ID = createField(DSL.name("repuesto_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.generacion_id</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Integer> GENERACION_ID = createField(DSL.name("generacion_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.monto</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, BigDecimal> MONTO = createField(DSL.name("monto"), SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.comision_empleado</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, BigDecimal> COMISION_EMPLEADO = createField(DSL.name("comision_empleado"), SQLDataType.DECIMAL(12, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.descripcion</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, String> DESCRIPCION = createField(DSL.name("descripcion"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.referencia</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, String> REFERENCIA = createField(DSL.name("referencia"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.estado</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, TransaccionesFinancierasEstado> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("'COMPLETADA'", SQLDataType.VARCHAR)).asEnumDataType(TransaccionesFinancierasEstado.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.activo</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.fecha_creacion</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.transacciones_financieras.fecha_actualizacion</code>.
     */
    public final TableField<TransaccionesFinancierasRecord, LocalDateTime> FECHA_ACTUALIZACION = createField(DSL.name("fecha_actualizacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private TransaccionesFinancieras(Name alias, Table<TransaccionesFinancierasRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransaccionesFinancieras(Name alias, Table<TransaccionesFinancierasRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.transacciones_financieras</code> table reference
     */
    public TransaccionesFinancieras(String alias) {
        this(DSL.name(alias), TRANSACCIONES_FINANCIERAS);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.transacciones_financieras</code> table reference
     */
    public TransaccionesFinancieras(Name alias) {
        this(alias, TRANSACCIONES_FINANCIERAS);
    }

    /**
     * Create a <code>sistema_vehicular.transacciones_financieras</code> table
     * reference
     */
    public TransaccionesFinancieras() {
        this(DSL.name("transacciones_financieras"), null);
    }

    public <O extends Record> TransaccionesFinancieras(Table<O> path, ForeignKey<O, TransaccionesFinancierasRecord> childPath, InverseForeignKey<O, TransaccionesFinancierasRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACCIONES_FINANCIERAS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransaccionesFinancierasPath extends TransaccionesFinancieras implements Path<TransaccionesFinancierasRecord> {
        public <O extends Record> TransaccionesFinancierasPath(Table<O> path, ForeignKey<O, TransaccionesFinancierasRecord> childPath, InverseForeignKey<O, TransaccionesFinancierasRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransaccionesFinancierasPath(Name alias, Table<TransaccionesFinancierasRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransaccionesFinancierasPath as(String alias) {
            return new TransaccionesFinancierasPath(DSL.name(alias), this);
        }

        @Override
        public TransaccionesFinancierasPath as(Name alias) {
            return new TransaccionesFinancierasPath(alias, this);
        }

        @Override
        public TransaccionesFinancierasPath as(Table<?> alias) {
            return new TransaccionesFinancierasPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRANSACCIONES_FINANCIERAS_IDX_EMPLEADO, Indexes.TRANSACCIONES_FINANCIERAS_IDX_ESTADO, Indexes.TRANSACCIONES_FINANCIERAS_IDX_FECHA, Indexes.TRANSACCIONES_FINANCIERAS_IDX_GENERACION, Indexes.TRANSACCIONES_FINANCIERAS_IDX_TIPO_TRANSACCION, Indexes.TRANSACCIONES_FINANCIERAS_IDX_VEHICULO, Indexes.TRANSACCIONES_FINANCIERAS_REPUESTO_ID);
    }

    @Override
    public Identity<TransaccionesFinancierasRecord, Integer> getIdentity() {
        return (Identity<TransaccionesFinancierasRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransaccionesFinancierasRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACCIONES_FINANCIERAS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransaccionesFinancierasRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRANSACCIONES_FINANCIERAS_CODIGO_TRANSACCION);
    }

    @Override
    public List<ForeignKey<TransaccionesFinancierasRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACCIONES_FINANCIERAS_IBFK_1, Keys.TRANSACCIONES_FINANCIERAS_IBFK_2, Keys.TRANSACCIONES_FINANCIERAS_IBFK_3, Keys.TRANSACCIONES_FINANCIERAS_IBFK_4, Keys.TRANSACCIONES_FINANCIERAS_IBFK_5);
    }

    private transient TiposTransaccionesPath _tiposTransacciones;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.tipos_transacciones</code> table.
     */
    public TiposTransaccionesPath tiposTransacciones() {
        if (_tiposTransacciones == null)
            _tiposTransacciones = new TiposTransaccionesPath(this, Keys.TRANSACCIONES_FINANCIERAS_IBFK_1, null);

        return _tiposTransacciones;
    }

    private transient EmpleadosPath _empleados;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.empleados</code> table.
     */
    public EmpleadosPath empleados() {
        if (_empleados == null)
            _empleados = new EmpleadosPath(this, Keys.TRANSACCIONES_FINANCIERAS_IBFK_2, null);

        return _empleados;
    }

    private transient VehiculosPath _vehiculos;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.vehiculos</code> table.
     */
    public VehiculosPath vehiculos() {
        if (_vehiculos == null)
            _vehiculos = new VehiculosPath(this, Keys.TRANSACCIONES_FINANCIERAS_IBFK_3, null);

        return _vehiculos;
    }

    private transient InventarioRepuestosPath _inventarioRepuestos;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.inventario_repuestos</code> table.
     */
    public InventarioRepuestosPath inventarioRepuestos() {
        if (_inventarioRepuestos == null)
            _inventarioRepuestos = new InventarioRepuestosPath(this, Keys.TRANSACCIONES_FINANCIERAS_IBFK_4, null);

        return _inventarioRepuestos;
    }

    private transient GeneracionesPath _generaciones;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.generaciones</code> table.
     */
    public GeneracionesPath generaciones() {
        if (_generaciones == null)
            _generaciones = new GeneracionesPath(this, Keys.TRANSACCIONES_FINANCIERAS_IBFK_5, null);

        return _generaciones;
    }

    private transient HistorialTransaccionesPath _historialTransacciones;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.historial_transacciones</code> table
     */
    public HistorialTransaccionesPath historialTransacciones() {
        if (_historialTransacciones == null)
            _historialTransacciones = new HistorialTransaccionesPath(this, null, Keys.HISTORIAL_TRANSACCIONES_IBFK_1.getInverseKey());

        return _historialTransacciones;
    }

    @Override
    public TransaccionesFinancieras as(String alias) {
        return new TransaccionesFinancieras(DSL.name(alias), this);
    }

    @Override
    public TransaccionesFinancieras as(Name alias) {
        return new TransaccionesFinancieras(alias, this);
    }

    @Override
    public TransaccionesFinancieras as(Table<?> alias) {
        return new TransaccionesFinancieras(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransaccionesFinancieras rename(String name) {
        return new TransaccionesFinancieras(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransaccionesFinancieras rename(Name name) {
        return new TransaccionesFinancieras(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransaccionesFinancieras rename(Table<?> name) {
        return new TransaccionesFinancieras(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransaccionesFinancieras where(Condition condition) {
        return new TransaccionesFinancieras(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransaccionesFinancieras where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransaccionesFinancieras where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransaccionesFinancieras where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransaccionesFinancieras where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransaccionesFinancieras where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransaccionesFinancieras where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransaccionesFinancieras where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransaccionesFinancieras whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransaccionesFinancieras whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
