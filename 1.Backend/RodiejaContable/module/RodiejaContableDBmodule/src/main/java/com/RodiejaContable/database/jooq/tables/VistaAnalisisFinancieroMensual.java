/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.tables.records.VistaAnalisisFinancieroMensualRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaAnalisisFinancieroMensual extends TableImpl<VistaAnalisisFinancieroMensualRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_analisis_financiero_mensual</code>
     */
    public static final VistaAnalisisFinancieroMensual VISTA_ANALISIS_FINANCIERO_MENSUAL = new VistaAnalisisFinancieroMensual();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaAnalisisFinancieroMensualRecord> getRecordType() {
        return VistaAnalisisFinancieroMensualRecord.class;
    }

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.anio</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, Integer> ANIO = createField(DSL.name("anio"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.mes</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, Integer> MES = createField(DSL.name("mes"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.nombre_mes</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, String> NOMBRE_MES = createField(DSL.name("nombre_mes"), SQLDataType.VARCHAR(9).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.total_transacciones</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, Long> TOTAL_TRANSACCIONES = createField(DSL.name("total_transacciones"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.total_ingresos</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, BigDecimal> TOTAL_INGRESOS = createField(DSL.name("total_ingresos"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.total_egresos</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, BigDecimal> TOTAL_EGRESOS = createField(DSL.name("total_egresos"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.balance_neto</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, BigDecimal> BALANCE_NETO = createField(DSL.name("balance_neto"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.total_comisiones</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, BigDecimal> TOTAL_COMISIONES = createField(DSL.name("total_comisiones"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.vehiculos_vendidos</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, Long> VEHICULOS_VENDIDOS = createField(DSL.name("vehiculos_vendidos"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.repuestos_vendidos</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, Long> REPUESTOS_VENDIDOS = createField(DSL.name("repuestos_vendidos"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.promedio_venta</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, BigDecimal> PROMEDIO_VENTA = createField(DSL.name("promedio_venta"), SQLDataType.DECIMAL(13, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_analisis_financiero_mensual.ratio_ingresos_egresos</code>.
     */
    public final TableField<VistaAnalisisFinancieroMensualRecord, BigDecimal> RATIO_INGRESOS_EGRESOS = createField(DSL.name("ratio_ingresos_egresos"), SQLDataType.DECIMAL(37, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    private VistaAnalisisFinancieroMensual(Name alias, Table<VistaAnalisisFinancieroMensualRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VistaAnalisisFinancieroMensual(Name alias, Table<VistaAnalisisFinancieroMensualRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_analisis_financiero_mensual` as select year(`tf`.`fecha`) AS `anio`,month(`tf`.`fecha`) AS `mes`,monthname(`tf`.`fecha`) AS `nombre_mes`,count(distinct `tf`.`id`) AS `total_transacciones`,sum(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` else 0 end) AS `total_ingresos`,sum(case when `tt`.`categoria` = 'EGRESO' then `tf`.`monto` else 0 end) AS `total_egresos`,sum(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` else -`tf`.`monto` end) AS `balance_neto`,sum(`tf`.`comision_empleado`) AS `total_comisiones`,count(distinct case when `tt`.`categoria` = 'INGRESO' then `tf`.`vehiculo_id` end) AS `vehiculos_vendidos`,count(distinct case when `tt`.`categoria` = 'INGRESO' then `tf`.`repuesto_id` end) AS `repuestos_vendidos`,round(avg(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` end),2) AS `promedio_venta`,round(sum(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` else 0 end) / nullif(sum(case when `tt`.`categoria` = 'EGRESO' then `tf`.`monto` else 0 end),0),2) AS `ratio_ingresos_egresos` from (`sistema_vehicular`.`transacciones_financieras` `tf` join `sistema_vehicular`.`tipos_transacciones` `tt` on(`tf`.`tipo_transaccion_id` = `tt`.`id`)) where `tf`.`activo` = 1 group by year(`tf`.`fecha`),month(`tf`.`fecha`),monthname(`tf`.`fecha`) order by year(`tf`.`fecha`) desc,month(`tf`.`fecha`) desc"), where);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_analisis_financiero_mensual</code> table
     * reference
     */
    public VistaAnalisisFinancieroMensual(String alias) {
        this(DSL.name(alias), VISTA_ANALISIS_FINANCIERO_MENSUAL);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_analisis_financiero_mensual</code> table
     * reference
     */
    public VistaAnalisisFinancieroMensual(Name alias) {
        this(alias, VISTA_ANALISIS_FINANCIERO_MENSUAL);
    }

    /**
     * Create a <code>sistema_vehicular.vista_analisis_financiero_mensual</code>
     * table reference
     */
    public VistaAnalisisFinancieroMensual() {
        this(DSL.name("vista_analisis_financiero_mensual"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaAnalisisFinancieroMensual as(String alias) {
        return new VistaAnalisisFinancieroMensual(DSL.name(alias), this);
    }

    @Override
    public VistaAnalisisFinancieroMensual as(Name alias) {
        return new VistaAnalisisFinancieroMensual(alias, this);
    }

    @Override
    public VistaAnalisisFinancieroMensual as(Table<?> alias) {
        return new VistaAnalisisFinancieroMensual(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaAnalisisFinancieroMensual rename(String name) {
        return new VistaAnalisisFinancieroMensual(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaAnalisisFinancieroMensual rename(Name name) {
        return new VistaAnalisisFinancieroMensual(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaAnalisisFinancieroMensual rename(Table<?> name) {
        return new VistaAnalisisFinancieroMensual(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaAnalisisFinancieroMensual where(Condition condition) {
        return new VistaAnalisisFinancieroMensual(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaAnalisisFinancieroMensual where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaAnalisisFinancieroMensual where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaAnalisisFinancieroMensual where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaAnalisisFinancieroMensual where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaAnalisisFinancieroMensual where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaAnalisisFinancieroMensual where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaAnalisisFinancieroMensual where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaAnalisisFinancieroMensual whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaAnalisisFinancieroMensual whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
