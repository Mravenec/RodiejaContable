/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Indexes;
import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.enums.HistorialVehiculosAccion;
import com.RodiejaContable.database.jooq.tables.Vehiculos.VehiculosPath;
import com.RodiejaContable.database.jooq.tables.records.HistorialVehiculosRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HistorialVehiculos extends TableImpl<HistorialVehiculosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.historial_vehiculos</code>
     */
    public static final HistorialVehiculos HISTORIAL_VEHICULOS = new HistorialVehiculos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistorialVehiculosRecord> getRecordType() {
        return HistorialVehiculosRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.historial_vehiculos.id</code>.
     */
    public final TableField<HistorialVehiculosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_vehiculos.vehiculo_id</code>.
     */
    public final TableField<HistorialVehiculosRecord, Integer> VEHICULO_ID = createField(DSL.name("vehiculo_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.historial_vehiculos.accion</code>.
     */
    public final TableField<HistorialVehiculosRecord, HistorialVehiculosAccion> ACCION = createField(DSL.name("accion"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(HistorialVehiculosAccion.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_vehiculos.campo_modificado</code>.
     */
    public final TableField<HistorialVehiculosRecord, String> CAMPO_MODIFICADO = createField(DSL.name("campo_modificado"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_vehiculos.valor_anterior</code>.
     */
    public final TableField<HistorialVehiculosRecord, String> VALOR_ANTERIOR = createField(DSL.name("valor_anterior"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_vehiculos.valor_nuevo</code>.
     */
    public final TableField<HistorialVehiculosRecord, String> VALOR_NUEVO = createField(DSL.name("valor_nuevo"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>sistema_vehicular.historial_vehiculos.usuario</code>.
     */
    public final TableField<HistorialVehiculosRecord, String> USUARIO = createField(DSL.name("usuario"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_vehiculos.fecha_cambio</code>.
     */
    public final TableField<HistorialVehiculosRecord, LocalDateTime> FECHA_CAMBIO = createField(DSL.name("fecha_cambio"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sistema_vehicular.historial_vehiculos.ip_usuario</code>.
     */
    public final TableField<HistorialVehiculosRecord, String> IP_USUARIO = createField(DSL.name("ip_usuario"), SQLDataType.VARCHAR(45).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_vehiculos.observaciones</code>.
     */
    public final TableField<HistorialVehiculosRecord, String> OBSERVACIONES = createField(DSL.name("observaciones"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private HistorialVehiculos(Name alias, Table<HistorialVehiculosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HistorialVehiculos(Name alias, Table<HistorialVehiculosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sistema_vehicular.historial_vehiculos</code>
     * table reference
     */
    public HistorialVehiculos(String alias) {
        this(DSL.name(alias), HISTORIAL_VEHICULOS);
    }

    /**
     * Create an aliased <code>sistema_vehicular.historial_vehiculos</code>
     * table reference
     */
    public HistorialVehiculos(Name alias) {
        this(alias, HISTORIAL_VEHICULOS);
    }

    /**
     * Create a <code>sistema_vehicular.historial_vehiculos</code> table
     * reference
     */
    public HistorialVehiculos() {
        this(DSL.name("historial_vehiculos"), null);
    }

    public <O extends Record> HistorialVehiculos(Table<O> path, ForeignKey<O, HistorialVehiculosRecord> childPath, InverseForeignKey<O, HistorialVehiculosRecord> parentPath) {
        super(path, childPath, parentPath, HISTORIAL_VEHICULOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HistorialVehiculosPath extends HistorialVehiculos implements Path<HistorialVehiculosRecord> {
        public <O extends Record> HistorialVehiculosPath(Table<O> path, ForeignKey<O, HistorialVehiculosRecord> childPath, InverseForeignKey<O, HistorialVehiculosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HistorialVehiculosPath(Name alias, Table<HistorialVehiculosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HistorialVehiculosPath as(String alias) {
            return new HistorialVehiculosPath(DSL.name(alias), this);
        }

        @Override
        public HistorialVehiculosPath as(Name alias) {
            return new HistorialVehiculosPath(alias, this);
        }

        @Override
        public HistorialVehiculosPath as(Table<?> alias) {
            return new HistorialVehiculosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HISTORIAL_VEHICULOS_IDX_ACCION, Indexes.HISTORIAL_VEHICULOS_IDX_VEHICULO_FECHA);
    }

    @Override
    public Identity<HistorialVehiculosRecord, Integer> getIdentity() {
        return (Identity<HistorialVehiculosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HistorialVehiculosRecord> getPrimaryKey() {
        return Keys.KEY_HISTORIAL_VEHICULOS_PRIMARY;
    }

    @Override
    public List<ForeignKey<HistorialVehiculosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HISTORIAL_VEHICULOS_IBFK_1);
    }

    private transient VehiculosPath _vehiculos;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.vehiculos</code> table.
     */
    public VehiculosPath vehiculos() {
        if (_vehiculos == null)
            _vehiculos = new VehiculosPath(this, Keys.HISTORIAL_VEHICULOS_IBFK_1, null);

        return _vehiculos;
    }

    @Override
    public HistorialVehiculos as(String alias) {
        return new HistorialVehiculos(DSL.name(alias), this);
    }

    @Override
    public HistorialVehiculos as(Name alias) {
        return new HistorialVehiculos(alias, this);
    }

    @Override
    public HistorialVehiculos as(Table<?> alias) {
        return new HistorialVehiculos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HistorialVehiculos rename(String name) {
        return new HistorialVehiculos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistorialVehiculos rename(Name name) {
        return new HistorialVehiculos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistorialVehiculos rename(Table<?> name) {
        return new HistorialVehiculos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialVehiculos where(Condition condition) {
        return new HistorialVehiculos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialVehiculos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialVehiculos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialVehiculos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialVehiculos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialVehiculos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialVehiculos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialVehiculos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialVehiculos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialVehiculos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
