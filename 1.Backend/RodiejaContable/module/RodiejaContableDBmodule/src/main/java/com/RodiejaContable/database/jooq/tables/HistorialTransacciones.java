/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Indexes;
import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.enums.HistorialTransaccionesAccion;
import com.RodiejaContable.database.jooq.tables.TransaccionesFinancieras.TransaccionesFinancierasPath;
import com.RodiejaContable.database.jooq.tables.records.HistorialTransaccionesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HistorialTransacciones extends TableImpl<HistorialTransaccionesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.historial_transacciones</code>
     */
    public static final HistorialTransacciones HISTORIAL_TRANSACCIONES = new HistorialTransacciones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistorialTransaccionesRecord> getRecordType() {
        return HistorialTransaccionesRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.historial_transacciones.id</code>.
     */
    public final TableField<HistorialTransaccionesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.transaccion_id</code>.
     */
    public final TableField<HistorialTransaccionesRecord, Integer> TRANSACCION_ID = createField(DSL.name("transaccion_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.historial_transacciones.accion</code>.
     */
    public final TableField<HistorialTransaccionesRecord, HistorialTransaccionesAccion> ACCION = createField(DSL.name("accion"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(HistorialTransaccionesAccion.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.campo_modificado</code>.
     */
    public final TableField<HistorialTransaccionesRecord, String> CAMPO_MODIFICADO = createField(DSL.name("campo_modificado"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.valor_anterior</code>.
     */
    public final TableField<HistorialTransaccionesRecord, String> VALOR_ANTERIOR = createField(DSL.name("valor_anterior"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.valor_nuevo</code>.
     */
    public final TableField<HistorialTransaccionesRecord, String> VALOR_NUEVO = createField(DSL.name("valor_nuevo"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.usuario</code>.
     */
    public final TableField<HistorialTransaccionesRecord, String> USUARIO = createField(DSL.name("usuario"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.fecha_cambio</code>.
     */
    public final TableField<HistorialTransaccionesRecord, LocalDateTime> FECHA_CAMBIO = createField(DSL.name("fecha_cambio"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.ip_usuario</code>.
     */
    public final TableField<HistorialTransaccionesRecord, String> IP_USUARIO = createField(DSL.name("ip_usuario"), SQLDataType.VARCHAR(45).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.historial_transacciones.observaciones</code>.
     */
    public final TableField<HistorialTransaccionesRecord, String> OBSERVACIONES = createField(DSL.name("observaciones"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    private HistorialTransacciones(Name alias, Table<HistorialTransaccionesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HistorialTransacciones(Name alias, Table<HistorialTransaccionesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sistema_vehicular.historial_transacciones</code>
     * table reference
     */
    public HistorialTransacciones(String alias) {
        this(DSL.name(alias), HISTORIAL_TRANSACCIONES);
    }

    /**
     * Create an aliased <code>sistema_vehicular.historial_transacciones</code>
     * table reference
     */
    public HistorialTransacciones(Name alias) {
        this(alias, HISTORIAL_TRANSACCIONES);
    }

    /**
     * Create a <code>sistema_vehicular.historial_transacciones</code> table
     * reference
     */
    public HistorialTransacciones() {
        this(DSL.name("historial_transacciones"), null);
    }

    public <O extends Record> HistorialTransacciones(Table<O> path, ForeignKey<O, HistorialTransaccionesRecord> childPath, InverseForeignKey<O, HistorialTransaccionesRecord> parentPath) {
        super(path, childPath, parentPath, HISTORIAL_TRANSACCIONES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HistorialTransaccionesPath extends HistorialTransacciones implements Path<HistorialTransaccionesRecord> {
        public <O extends Record> HistorialTransaccionesPath(Table<O> path, ForeignKey<O, HistorialTransaccionesRecord> childPath, InverseForeignKey<O, HistorialTransaccionesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HistorialTransaccionesPath(Name alias, Table<HistorialTransaccionesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HistorialTransaccionesPath as(String alias) {
            return new HistorialTransaccionesPath(DSL.name(alias), this);
        }

        @Override
        public HistorialTransaccionesPath as(Name alias) {
            return new HistorialTransaccionesPath(alias, this);
        }

        @Override
        public HistorialTransaccionesPath as(Table<?> alias) {
            return new HistorialTransaccionesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HISTORIAL_TRANSACCIONES_IDX_ACCION, Indexes.HISTORIAL_TRANSACCIONES_IDX_TRANSACCION_FECHA);
    }

    @Override
    public Identity<HistorialTransaccionesRecord, Integer> getIdentity() {
        return (Identity<HistorialTransaccionesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HistorialTransaccionesRecord> getPrimaryKey() {
        return Keys.KEY_HISTORIAL_TRANSACCIONES_PRIMARY;
    }

    @Override
    public List<ForeignKey<HistorialTransaccionesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HISTORIAL_TRANSACCIONES_IBFK_1);
    }

    private transient TransaccionesFinancierasPath _transaccionesFinancieras;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.transacciones_financieras</code> table.
     */
    public TransaccionesFinancierasPath transaccionesFinancieras() {
        if (_transaccionesFinancieras == null)
            _transaccionesFinancieras = new TransaccionesFinancierasPath(this, Keys.HISTORIAL_TRANSACCIONES_IBFK_1, null);

        return _transaccionesFinancieras;
    }

    @Override
    public HistorialTransacciones as(String alias) {
        return new HistorialTransacciones(DSL.name(alias), this);
    }

    @Override
    public HistorialTransacciones as(Name alias) {
        return new HistorialTransacciones(alias, this);
    }

    @Override
    public HistorialTransacciones as(Table<?> alias) {
        return new HistorialTransacciones(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HistorialTransacciones rename(String name) {
        return new HistorialTransacciones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistorialTransacciones rename(Name name) {
        return new HistorialTransacciones(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistorialTransacciones rename(Table<?> name) {
        return new HistorialTransacciones(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialTransacciones where(Condition condition) {
        return new HistorialTransacciones(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialTransacciones where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialTransacciones where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialTransacciones where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialTransacciones where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialTransacciones where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialTransacciones where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistorialTransacciones where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialTransacciones whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistorialTransacciones whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
