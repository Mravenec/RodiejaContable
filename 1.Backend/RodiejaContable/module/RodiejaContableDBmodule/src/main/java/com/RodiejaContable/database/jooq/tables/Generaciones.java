/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.tables.Modelos.ModelosPath;
import com.RodiejaContable.database.jooq.tables.TransaccionesFinancieras.TransaccionesFinancierasPath;
import com.RodiejaContable.database.jooq.tables.Vehiculos.VehiculosPath;
import com.RodiejaContable.database.jooq.tables.records.GeneracionesRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Generaciones extends TableImpl<GeneracionesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sistema_vehicular.generaciones</code>
     */
    public static final Generaciones GENERACIONES = new Generaciones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneracionesRecord> getRecordType() {
        return GeneracionesRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.generaciones.id</code>.
     */
    public final TableField<GeneracionesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.modelo_id</code>.
     */
    public final TableField<GeneracionesRecord, Integer> MODELO_ID = createField(DSL.name("modelo_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.nombre</code>.
     */
    public final TableField<GeneracionesRecord, String> NOMBRE = createField(DSL.name("nombre"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.descripcion</code>.
     */
    public final TableField<GeneracionesRecord, String> DESCRIPCION = createField(DSL.name("descripcion"), SQLDataType.VARCHAR(200).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.anio_inicio</code>.
     */
    public final TableField<GeneracionesRecord, Integer> ANIO_INICIO = createField(DSL.name("anio_inicio"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.anio_fin</code>.
     */
    public final TableField<GeneracionesRecord, Integer> ANIO_FIN = createField(DSL.name("anio_fin"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.total_inversion</code>.
     */
    public final TableField<GeneracionesRecord, BigDecimal> TOTAL_INVERSION = createField(DSL.name("total_inversion"), SQLDataType.DECIMAL(15, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.total_ingresos</code>.
     */
    public final TableField<GeneracionesRecord, BigDecimal> TOTAL_INGRESOS = createField(DSL.name("total_ingresos"), SQLDataType.DECIMAL(15, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.total_egresos</code>.
     */
    public final TableField<GeneracionesRecord, BigDecimal> TOTAL_EGRESOS = createField(DSL.name("total_egresos"), SQLDataType.DECIMAL(15, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.balance_neto</code>.
     */
    public final TableField<GeneracionesRecord, BigDecimal> BALANCE_NETO = createField(DSL.name("balance_neto"), SQLDataType.DECIMAL(15, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.activo</code>.
     */
    public final TableField<GeneracionesRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sistema_vehicular.generaciones.fecha_creacion</code>.
     */
    public final TableField<GeneracionesRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Generaciones(Name alias, Table<GeneracionesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Generaciones(Name alias, Table<GeneracionesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sistema_vehicular.generaciones</code> table
     * reference
     */
    public Generaciones(String alias) {
        this(DSL.name(alias), GENERACIONES);
    }

    /**
     * Create an aliased <code>sistema_vehicular.generaciones</code> table
     * reference
     */
    public Generaciones(Name alias) {
        this(alias, GENERACIONES);
    }

    /**
     * Create a <code>sistema_vehicular.generaciones</code> table reference
     */
    public Generaciones() {
        this(DSL.name("generaciones"), null);
    }

    public <O extends Record> Generaciones(Table<O> path, ForeignKey<O, GeneracionesRecord> childPath, InverseForeignKey<O, GeneracionesRecord> parentPath) {
        super(path, childPath, parentPath, GENERACIONES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GeneracionesPath extends Generaciones implements Path<GeneracionesRecord> {
        public <O extends Record> GeneracionesPath(Table<O> path, ForeignKey<O, GeneracionesRecord> childPath, InverseForeignKey<O, GeneracionesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GeneracionesPath(Name alias, Table<GeneracionesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GeneracionesPath as(String alias) {
            return new GeneracionesPath(DSL.name(alias), this);
        }

        @Override
        public GeneracionesPath as(Name alias) {
            return new GeneracionesPath(alias, this);
        }

        @Override
        public GeneracionesPath as(Table<?> alias) {
            return new GeneracionesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public Identity<GeneracionesRecord, Integer> getIdentity() {
        return (Identity<GeneracionesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GeneracionesRecord> getPrimaryKey() {
        return Keys.KEY_GENERACIONES_PRIMARY;
    }

    @Override
    public List<UniqueKey<GeneracionesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GENERACIONES_UNIQUE_MODELO_GENERACION);
    }

    @Override
    public List<ForeignKey<GeneracionesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GENERACIONES_IBFK_1);
    }

    private transient ModelosPath _modelos;

    /**
     * Get the implicit join path to the <code>sistema_vehicular.modelos</code>
     * table.
     */
    public ModelosPath modelos() {
        if (_modelos == null)
            _modelos = new ModelosPath(this, Keys.GENERACIONES_IBFK_1, null);

        return _modelos;
    }

    private transient TransaccionesFinancierasPath _transaccionesFinancieras;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.transacciones_financieras</code> table
     */
    public TransaccionesFinancierasPath transaccionesFinancieras() {
        if (_transaccionesFinancieras == null)
            _transaccionesFinancieras = new TransaccionesFinancierasPath(this, null, Keys.TRANSACCIONES_FINANCIERAS_IBFK_5.getInverseKey());

        return _transaccionesFinancieras;
    }

    private transient VehiculosPath _vehiculos;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.vehiculos</code> table
     */
    public VehiculosPath vehiculos() {
        if (_vehiculos == null)
            _vehiculos = new VehiculosPath(this, null, Keys.VEHICULOS_IBFK_1.getInverseKey());

        return _vehiculos;
    }

    @Override
    public List<Check<GeneracionesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("CONSTRAINT_1"), "`anio_inicio` <= `anio_fin`", true)
        );
    }

    @Override
    public Generaciones as(String alias) {
        return new Generaciones(DSL.name(alias), this);
    }

    @Override
    public Generaciones as(Name alias) {
        return new Generaciones(alias, this);
    }

    @Override
    public Generaciones as(Table<?> alias) {
        return new Generaciones(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Generaciones rename(String name) {
        return new Generaciones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Generaciones rename(Name name) {
        return new Generaciones(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Generaciones rename(Table<?> name) {
        return new Generaciones(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Generaciones where(Condition condition) {
        return new Generaciones(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Generaciones where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Generaciones where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Generaciones where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Generaciones where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Generaciones where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Generaciones where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Generaciones where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Generaciones whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Generaciones whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
