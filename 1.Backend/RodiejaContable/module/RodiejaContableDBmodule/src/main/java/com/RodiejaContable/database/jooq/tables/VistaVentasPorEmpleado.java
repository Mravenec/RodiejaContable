/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.tables.records.VistaVentasPorEmpleadoRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaVentasPorEmpleado extends TableImpl<VistaVentasPorEmpleadoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_ventas_por_empleado</code>
     */
    public static final VistaVentasPorEmpleado VISTA_VENTAS_POR_EMPLEADO = new VistaVentasPorEmpleado();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaVentasPorEmpleadoRecord> getRecordType() {
        return VistaVentasPorEmpleadoRecord.class;
    }

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.empleado</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, String> EMPLEADO = createField(DSL.name("empleado"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.total_transacciones</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, Long> TOTAL_TRANSACCIONES = createField(DSL.name("total_transacciones"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.transacciones_venta</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, Long> TRANSACCIONES_VENTA = createField(DSL.name("transacciones_venta"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.total_ventas</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, BigDecimal> TOTAL_VENTAS = createField(DSL.name("total_ventas"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.total_comisiones</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, BigDecimal> TOTAL_COMISIONES = createField(DSL.name("total_comisiones"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.promedio_venta</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, BigDecimal> PROMEDIO_VENTA = createField(DSL.name("promedio_venta"), SQLDataType.DECIMAL(13, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_por_empleado.porcentaje_comision</code>.
     */
    public final TableField<VistaVentasPorEmpleadoRecord, BigDecimal> PORCENTAJE_COMISION = createField(DSL.name("porcentaje_comision"), SQLDataType.DECIMAL(40, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    private VistaVentasPorEmpleado(Name alias, Table<VistaVentasPorEmpleadoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VistaVentasPorEmpleado(Name alias, Table<VistaVentasPorEmpleadoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_ventas_por_empleado` as select `e`.`nombre` AS `empleado`,count(distinct `tf`.`id`) AS `total_transacciones`,count(distinct case when `tt`.`categoria` = 'INGRESO' then `tf`.`id` end) AS `transacciones_venta`,sum(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` else 0 end) AS `total_ventas`,sum(`tf`.`comision_empleado`) AS `total_comisiones`,round(avg(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` end),2) AS `promedio_venta`,round(sum(`tf`.`comision_empleado`) / nullif(sum(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` else 0 end),0) * 100,2) AS `porcentaje_comision` from ((`sistema_vehicular`.`empleados` `e` left join `sistema_vehicular`.`transacciones_financieras` `tf` on(`e`.`id` = `tf`.`empleado_id`)) left join `sistema_vehicular`.`tipos_transacciones` `tt` on(`tf`.`tipo_transaccion_id` = `tt`.`id`)) where `e`.`activo` = 1 and (`tf`.`activo` = 1 or `tf`.`id` is null) group by `e`.`id`,`e`.`nombre` order by sum(case when `tt`.`categoria` = 'INGRESO' then `tf`.`monto` else 0 end) desc"), where);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_ventas_por_empleado</code> table reference
     */
    public VistaVentasPorEmpleado(String alias) {
        this(DSL.name(alias), VISTA_VENTAS_POR_EMPLEADO);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_ventas_por_empleado</code> table reference
     */
    public VistaVentasPorEmpleado(Name alias) {
        this(alias, VISTA_VENTAS_POR_EMPLEADO);
    }

    /**
     * Create a <code>sistema_vehicular.vista_ventas_por_empleado</code> table
     * reference
     */
    public VistaVentasPorEmpleado() {
        this(DSL.name("vista_ventas_por_empleado"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaVentasPorEmpleado as(String alias) {
        return new VistaVentasPorEmpleado(DSL.name(alias), this);
    }

    @Override
    public VistaVentasPorEmpleado as(Name alias) {
        return new VistaVentasPorEmpleado(alias, this);
    }

    @Override
    public VistaVentasPorEmpleado as(Table<?> alias) {
        return new VistaVentasPorEmpleado(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaVentasPorEmpleado rename(String name) {
        return new VistaVentasPorEmpleado(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaVentasPorEmpleado rename(Name name) {
        return new VistaVentasPorEmpleado(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaVentasPorEmpleado rename(Table<?> name) {
        return new VistaVentasPorEmpleado(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaVentasPorEmpleado where(Condition condition) {
        return new VistaVentasPorEmpleado(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaVentasPorEmpleado where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaVentasPorEmpleado where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaVentasPorEmpleado where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaVentasPorEmpleado where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaVentasPorEmpleado where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaVentasPorEmpleado where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VistaVentasPorEmpleado where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaVentasPorEmpleado whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VistaVentasPorEmpleado whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
