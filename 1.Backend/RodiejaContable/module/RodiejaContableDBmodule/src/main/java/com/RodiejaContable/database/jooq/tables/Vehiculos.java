/*
 * This file is generated by jOOQ.
 */
package com.RodiejaContable.database.jooq.tables;


import com.RodiejaContable.database.jooq.Indexes;
import com.RodiejaContable.database.jooq.Keys;
import com.RodiejaContable.database.jooq.SistemaVehicular;
import com.RodiejaContable.database.jooq.enums.VehiculosEstado;
import com.RodiejaContable.database.jooq.tables.Generaciones.GeneracionesPath;
import com.RodiejaContable.database.jooq.tables.HistorialVehiculos.HistorialVehiculosPath;
import com.RodiejaContable.database.jooq.tables.InventarioRepuestos.InventarioRepuestosPath;
import com.RodiejaContable.database.jooq.tables.TransaccionesFinancieras.TransaccionesFinancierasPath;
import com.RodiejaContable.database.jooq.tables.records.VehiculosRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vehiculos extends TableImpl<VehiculosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sistema_vehicular.vehiculos</code>
     */
    public static final Vehiculos VEHICULOS = new Vehiculos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehiculosRecord> getRecordType() {
        return VehiculosRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.vehiculos.id</code>.
     */
    public final TableField<VehiculosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.codigo_vehiculo</code>.
     */
    public final TableField<VehiculosRecord, String> CODIGO_VEHICULO = createField(DSL.name("codigo_vehiculo"), SQLDataType.VARCHAR(20).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.generacion_id</code>.
     */
    public final TableField<VehiculosRecord, Integer> GENERACION_ID = createField(DSL.name("generacion_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.anio</code>.
     */
    public final TableField<VehiculosRecord, Integer> ANIO = createField(DSL.name("anio"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.precio_compra</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> PRECIO_COMPRA = createField(DSL.name("precio_compra"), SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.costo_grua</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> COSTO_GRUA = createField(DSL.name("costo_grua"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.comisiones</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> COMISIONES = createField(DSL.name("comisiones"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.inversion_total</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> INVERSION_TOTAL = createField(DSL.name("inversion_total"), SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_ingreso</code>.
     */
    public final TableField<VehiculosRecord, LocalDate> FECHA_INGRESO = createField(DSL.name("fecha_ingreso"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.estado</code>.
     */
    public final TableField<VehiculosRecord, VehiculosEstado> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("'DISPONIBLE'", SQLDataType.VARCHAR)).asEnumDataType(VehiculosEstado.class), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.precio_venta</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> PRECIO_VENTA = createField(DSL.name("precio_venta"), SQLDataType.DECIMAL(12, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_venta</code>.
     */
    public final TableField<VehiculosRecord, LocalDate> FECHA_VENTA = createField(DSL.name("fecha_venta"), SQLDataType.LOCALDATE.defaultValue(DSL.inline("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.activo</code>.
     */
    public final TableField<VehiculosRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.notas</code>.
     */
    public final TableField<VehiculosRecord, String> NOTAS = createField(DSL.name("notas"), SQLDataType.CLOB.defaultValue(DSL.inline("NULL", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_creacion</code>.
     */
    public final TableField<VehiculosRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_actualizacion</code>.
     */
    public final TableField<VehiculosRecord, LocalDateTime> FECHA_ACTUALIZACION = createField(DSL.name("fecha_actualizacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Vehiculos(Name alias, Table<VehiculosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vehiculos(Name alias, Table<VehiculosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sistema_vehicular.vehiculos</code> table
     * reference
     */
    public Vehiculos(String alias) {
        this(DSL.name(alias), VEHICULOS);
    }

    /**
     * Create an aliased <code>sistema_vehicular.vehiculos</code> table
     * reference
     */
    public Vehiculos(Name alias) {
        this(alias, VEHICULOS);
    }

    /**
     * Create a <code>sistema_vehicular.vehiculos</code> table reference
     */
    public Vehiculos() {
        this(DSL.name("vehiculos"), null);
    }

    public <O extends Record> Vehiculos(Table<O> path, ForeignKey<O, VehiculosRecord> childPath, InverseForeignKey<O, VehiculosRecord> parentPath) {
        super(path, childPath, parentPath, VEHICULOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VehiculosPath extends Vehiculos implements Path<VehiculosRecord> {
        public <O extends Record> VehiculosPath(Table<O> path, ForeignKey<O, VehiculosRecord> childPath, InverseForeignKey<O, VehiculosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VehiculosPath(Name alias, Table<VehiculosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VehiculosPath as(String alias) {
            return new VehiculosPath(DSL.name(alias), this);
        }

        @Override
        public VehiculosPath as(Name alias) {
            return new VehiculosPath(alias, this);
        }

        @Override
        public VehiculosPath as(Table<?> alias) {
            return new VehiculosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VEHICULOS_IDX_ANIO, Indexes.VEHICULOS_IDX_ESTADO, Indexes.VEHICULOS_IDX_FECHA_INGRESO, Indexes.VEHICULOS_IDX_GENERACION_ACTIVO);
    }

    @Override
    public Identity<VehiculosRecord, Integer> getIdentity() {
        return (Identity<VehiculosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VehiculosRecord> getPrimaryKey() {
        return Keys.KEY_VEHICULOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<VehiculosRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_VEHICULOS_CODIGO_VEHICULO);
    }

    @Override
    public List<ForeignKey<VehiculosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEHICULOS_IBFK_1);
    }

    private transient GeneracionesPath _generaciones;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.generaciones</code> table.
     */
    public GeneracionesPath generaciones() {
        if (_generaciones == null)
            _generaciones = new GeneracionesPath(this, Keys.VEHICULOS_IBFK_1, null);

        return _generaciones;
    }

    private transient HistorialVehiculosPath _historialVehiculos;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.historial_vehiculos</code> table
     */
    public HistorialVehiculosPath historialVehiculos() {
        if (_historialVehiculos == null)
            _historialVehiculos = new HistorialVehiculosPath(this, null, Keys.HISTORIAL_VEHICULOS_IBFK_1.getInverseKey());

        return _historialVehiculos;
    }

    private transient InventarioRepuestosPath _inventarioRepuestos;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.inventario_repuestos</code> table
     */
    public InventarioRepuestosPath inventarioRepuestos() {
        if (_inventarioRepuestos == null)
            _inventarioRepuestos = new InventarioRepuestosPath(this, null, Keys.INVENTARIO_REPUESTOS_IBFK_1.getInverseKey());

        return _inventarioRepuestos;
    }

    private transient TransaccionesFinancierasPath _transaccionesFinancieras;

    /**
     * Get the implicit to-many join path to the
     * <code>sistema_vehicular.transacciones_financieras</code> table
     */
    public TransaccionesFinancierasPath transaccionesFinancieras() {
        if (_transaccionesFinancieras == null)
            _transaccionesFinancieras = new TransaccionesFinancierasPath(this, null, Keys.TRANSACCIONES_FINANCIERAS_IBFK_3.getInverseKey());

        return _transaccionesFinancieras;
    }

    @Override
    public Vehiculos as(String alias) {
        return new Vehiculos(DSL.name(alias), this);
    }

    @Override
    public Vehiculos as(Name alias) {
        return new Vehiculos(alias, this);
    }

    @Override
    public Vehiculos as(Table<?> alias) {
        return new Vehiculos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehiculos rename(String name) {
        return new Vehiculos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehiculos rename(Name name) {
        return new Vehiculos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehiculos rename(Table<?> name) {
        return new Vehiculos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehiculos where(Condition condition) {
        return new Vehiculos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehiculos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehiculos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehiculos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehiculos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehiculos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehiculos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vehiculos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehiculos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vehiculos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
