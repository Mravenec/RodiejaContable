/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.tables.records.VistaVentasEmpleadoMensualRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaVentasEmpleadoMensual extends TableImpl<VistaVentasEmpleadoMensualRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_ventas_empleado_mensual</code>
     */
    public static final VistaVentasEmpleadoMensual VISTA_VENTAS_EMPLEADO_MENSUAL = new VistaVentasEmpleadoMensual();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaVentasEmpleadoMensualRecord> getRecordType() {
        return VistaVentasEmpleadoMensualRecord.class;
    }

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.empleado</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, String> EMPLEADO = createField(DSL.name("empleado"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.anio</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, Integer> ANIO = createField(DSL.name("anio"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.mes</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, Integer> MES = createField(DSL.name("mes"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.nombre_mes</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, String> NOMBRE_MES = createField(DSL.name("nombre_mes"), SQLDataType.VARCHAR(9).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.transacciones_venta</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, Long> TRANSACCIONES_VENTA = createField(DSL.name("transacciones_venta"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.total_ventas</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, BigDecimal> TOTAL_VENTAS = createField(DSL.name("total_ventas"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.total_comisiones</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, BigDecimal> TOTAL_COMISIONES = createField(DSL.name("total_comisiones"), SQLDataType.DECIMAL(34, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.promedio_venta</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, BigDecimal> PROMEDIO_VENTA = createField(DSL.name("promedio_venta"), SQLDataType.DECIMAL(13, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_ventas_empleado_mensual.porcentaje_comision</code>.
     */
    public final TableField<VistaVentasEmpleadoMensualRecord, BigDecimal> PORCENTAJE_COMISION = createField(DSL.name("porcentaje_comision"), SQLDataType.DECIMAL(40, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    private VistaVentasEmpleadoMensual(Name alias, Table<VistaVentasEmpleadoMensualRecord> aliased) {
        this(alias, aliased, null);
    }

    private VistaVentasEmpleadoMensual(Name alias, Table<VistaVentasEmpleadoMensualRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_ventas_empleado_mensual` as select `e`.`nombre` AS `empleado`,year(`tf`.`fecha`) AS `anio`,month(`tf`.`fecha`) AS `mes`,monthname(`tf`.`fecha`) AS `nombre_mes`,count(`tf`.`id`) AS `transacciones_venta`,sum(`tf`.`monto`) AS `total_ventas`,sum(`tf`.`comision_empleado`) AS `total_comisiones`,round(avg(`tf`.`monto`),2) AS `promedio_venta`,round(sum(`tf`.`comision_empleado`) / nullif(sum(`tf`.`monto`),0) * 100,2) AS `porcentaje_comision` from ((`sistema_vehicular`.`transacciones_financieras` `tf` join `sistema_vehicular`.`tipos_transacciones` `tt` on(`tf`.`tipo_transaccion_id` = `tt`.`id`)) join `sistema_vehicular`.`empleados` `e` on(`tf`.`empleado_id` = `e`.`id`)) where `tt`.`categoria` = 'INGRESO' and `tf`.`activo` = 1 group by `e`.`id`,`tf`.`anio`,`tf`.`mes` order by year(`tf`.`fecha`) desc,month(`tf`.`fecha`) desc,`e`.`nombre`"));
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_ventas_empleado_mensual</code> table
     * reference
     */
    public VistaVentasEmpleadoMensual(String alias) {
        this(DSL.name(alias), VISTA_VENTAS_EMPLEADO_MENSUAL);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_ventas_empleado_mensual</code> table
     * reference
     */
    public VistaVentasEmpleadoMensual(Name alias) {
        this(alias, VISTA_VENTAS_EMPLEADO_MENSUAL);
    }

    /**
     * Create a <code>sistema_vehicular.vista_ventas_empleado_mensual</code>
     * table reference
     */
    public VistaVentasEmpleadoMensual() {
        this(DSL.name("vista_ventas_empleado_mensual"), null);
    }

    public <O extends Record> VistaVentasEmpleadoMensual(Table<O> child, ForeignKey<O, VistaVentasEmpleadoMensualRecord> key) {
        super(child, key, VISTA_VENTAS_EMPLEADO_MENSUAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaVentasEmpleadoMensual as(String alias) {
        return new VistaVentasEmpleadoMensual(DSL.name(alias), this);
    }

    @Override
    public VistaVentasEmpleadoMensual as(Name alias) {
        return new VistaVentasEmpleadoMensual(alias, this);
    }

    @Override
    public VistaVentasEmpleadoMensual as(Table<?> alias) {
        return new VistaVentasEmpleadoMensual(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaVentasEmpleadoMensual rename(String name) {
        return new VistaVentasEmpleadoMensual(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaVentasEmpleadoMensual rename(Name name) {
        return new VistaVentasEmpleadoMensual(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaVentasEmpleadoMensual rename(Table<?> name) {
        return new VistaVentasEmpleadoMensual(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Integer, Integer, String, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super Integer, ? super Integer, ? super String, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super Integer, ? super Integer, ? super String, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
