/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.tables.records.VistaDashboardEjecutivoRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaDashboardEjecutivo extends TableImpl<VistaDashboardEjecutivoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_dashboard_ejecutivo</code>
     */
    public static final VistaDashboardEjecutivo VISTA_DASHBOARD_EJECUTIVO = new VistaDashboardEjecutivo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaDashboardEjecutivoRecord> getRecordType() {
        return VistaDashboardEjecutivoRecord.class;
    }

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.seccion</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, String> SECCION = createField(DSL.name("seccion"), SQLDataType.VARCHAR(15).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.total_vehiculos</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, Long> TOTAL_VEHICULOS = createField(DSL.name("total_vehiculos"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.vehiculos_disponibles</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, Long> VEHICULOS_DISPONIBLES = createField(DSL.name("vehiculos_disponibles"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.vehiculos_vendidos</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, Long> VEHICULOS_VENDIDOS = createField(DSL.name("vehiculos_vendidos"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.total_repuestos</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, Long> TOTAL_REPUESTOS = createField(DSL.name("total_repuestos"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.repuestos_stock</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, Long> REPUESTOS_STOCK = createField(DSL.name("repuestos_stock"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.inversion_total</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, BigDecimal> INVERSION_TOTAL = createField(DSL.name("inversion_total"), SQLDataType.DECIMAL(37, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.ingresos_totales</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, BigDecimal> INGRESOS_TOTALES = createField(DSL.name("ingresos_totales"), SQLDataType.DECIMAL(37, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.egresos_totales</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, BigDecimal> EGRESOS_TOTALES = createField(DSL.name("egresos_totales"), SQLDataType.DECIMAL(37, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.balance_neto_total</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, BigDecimal> BALANCE_NETO_TOTAL = createField(DSL.name("balance_neto_total"), SQLDataType.DECIMAL(37, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_dashboard_ejecutivo.roi_promedio</code>.
     */
    public final TableField<VistaDashboardEjecutivoRecord, BigDecimal> ROI_PROMEDIO = createField(DSL.name("roi_promedio"), SQLDataType.DECIMAL(21, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    private VistaDashboardEjecutivo(Name alias, Table<VistaDashboardEjecutivoRecord> aliased) {
        this(alias, aliased, null);
    }

    private VistaDashboardEjecutivo(Name alias, Table<VistaDashboardEjecutivoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_dashboard_ejecutivo` as select 'Resumen General' AS `seccion`,count(distinct `v`.`id`) AS `total_vehiculos`,count(distinct case when `v`.`estado` = 'DISPONIBLE' then `v`.`id` end) AS `vehiculos_disponibles`,count(distinct case when `v`.`estado` = 'VENDIDO' then `v`.`id` end) AS `vehiculos_vendidos`,count(distinct `ir`.`id`) AS `total_repuestos`,count(distinct case when `ir`.`estado` = 'STOCK' then `ir`.`id` end) AS `repuestos_stock`,sum(distinct `g`.`total_inversion`) AS `inversion_total`,sum(distinct `g`.`total_ingresos`) AS `ingresos_totales`,sum(distinct `g`.`total_egresos`) AS `egresos_totales`,sum(distinct `g`.`balance_neto`) AS `balance_neto_total`,round(avg(case when `g`.`total_inversion` > 0 then `g`.`balance_neto` / `g`.`total_inversion` * 100 end),2) AS `roi_promedio` from ((`sistema_vehicular`.`vehiculos` `v` left join `sistema_vehicular`.`generaciones` `g` on(`v`.`generacion_id` = `g`.`id`)) left join `sistema_vehicular`.`inventario_repuestos` `ir` on(`v`.`id` = `ir`.`vehiculo_origen_id`)) where `v`.`activo` = 1 and `g`.`activo` = 1"));
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_dashboard_ejecutivo</code> table reference
     */
    public VistaDashboardEjecutivo(String alias) {
        this(DSL.name(alias), VISTA_DASHBOARD_EJECUTIVO);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_dashboard_ejecutivo</code> table reference
     */
    public VistaDashboardEjecutivo(Name alias) {
        this(alias, VISTA_DASHBOARD_EJECUTIVO);
    }

    /**
     * Create a <code>sistema_vehicular.vista_dashboard_ejecutivo</code> table
     * reference
     */
    public VistaDashboardEjecutivo() {
        this(DSL.name("vista_dashboard_ejecutivo"), null);
    }

    public <O extends Record> VistaDashboardEjecutivo(Table<O> child, ForeignKey<O, VistaDashboardEjecutivoRecord> key) {
        super(child, key, VISTA_DASHBOARD_EJECUTIVO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaDashboardEjecutivo as(String alias) {
        return new VistaDashboardEjecutivo(DSL.name(alias), this);
    }

    @Override
    public VistaDashboardEjecutivo as(Name alias) {
        return new VistaDashboardEjecutivo(alias, this);
    }

    @Override
    public VistaDashboardEjecutivo as(Table<?> alias) {
        return new VistaDashboardEjecutivo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaDashboardEjecutivo rename(String name) {
        return new VistaDashboardEjecutivo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaDashboardEjecutivo rename(Name name) {
        return new VistaDashboardEjecutivo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaDashboardEjecutivo rename(Table<?> name) {
        return new VistaDashboardEjecutivo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Long, Long, Long, Long, Long, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super String, ? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
