/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.enums.VistaInventarioCriticoEstado;
import com.rodiejacontable.database.jooq.enums.VistaInventarioCriticoParteVehiculo;
import com.rodiejacontable.database.jooq.tables.records.VistaInventarioCriticoRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaInventarioCritico extends TableImpl<VistaInventarioCriticoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_inventario_critico</code>
     */
    public static final VistaInventarioCritico VISTA_INVENTARIO_CRITICO = new VistaInventarioCritico();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaInventarioCriticoRecord> getRecordType() {
        return VistaInventarioCriticoRecord.class;
    }

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.codigo_repuesto</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, String> CODIGO_REPUESTO = createField(DSL.name("codigo_repuesto"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.parte_vehiculo</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, VistaInventarioCriticoParteVehiculo> PARTE_VEHICULO = createField(DSL.name("parte_vehiculo"), SQLDataType.VARCHAR(28).nullable(false).asEnumDataType(com.rodiejacontable.database.jooq.enums.VistaInventarioCriticoParteVehiculo.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.descripcion</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, String> DESCRIPCION = createField(DSL.name("descripcion"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.precio_costo</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, BigDecimal> PRECIO_COSTO = createField(DSL.name("precio_costo"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.precio_venta</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, BigDecimal> PRECIO_VENTA = createField(DSL.name("precio_venta"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.precio_mayoreo</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, BigDecimal> PRECIO_MAYOREO = createField(DSL.name("precio_mayoreo"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.formula_15</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, BigDecimal> FORMULA_15 = createField(DSL.name("formula_15"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.formula_30</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, BigDecimal> FORMULA_30 = createField(DSL.name("formula_30"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.estado</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, VistaInventarioCriticoEstado> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR(13).defaultValue(DSL.field(DSL.raw("'STOCK'"), SQLDataType.VARCHAR)).asEnumDataType(com.rodiejacontable.database.jooq.enums.VistaInventarioCriticoEstado.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.codigo_ubicacion</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, String> CODIGO_UBICACION = createField(DSL.name("codigo_ubicacion"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.vehiculo_origen</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, String> VEHICULO_ORIGEN = createField(DSL.name("vehiculo_origen"), SQLDataType.VARCHAR(202).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.anio_vehiculo</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, Integer> ANIO_VEHICULO = createField(DSL.name("anio_vehiculo"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.anio_registro</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, Short> ANIO_REGISTRO = createField(DSL.name("anio_registro"), SQLDataType.SMALLINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.mes_registro</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, Byte> MES_REGISTRO = createField(DSL.name("mes_registro"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.dias_en_inventario</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, Integer> DIAS_EN_INVENTARIO = createField(DSL.name("dias_en_inventario"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.clasificacion_margen</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, String> CLASIFICACION_MARGEN = createField(DSL.name("clasificacion_margen"), SQLDataType.VARCHAR(12).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_critico.clasificacion_rotacion</code>.
     */
    public final TableField<VistaInventarioCriticoRecord, String> CLASIFICACION_ROTACION = createField(DSL.name("clasificacion_rotacion"), SQLDataType.VARCHAR(17).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private VistaInventarioCritico(Name alias, Table<VistaInventarioCriticoRecord> aliased) {
        this(alias, aliased, null);
    }

    private VistaInventarioCritico(Name alias, Table<VistaInventarioCriticoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_inventario_critico` as select `ir`.`codigo_repuesto` AS `codigo_repuesto`,`ir`.`parte_vehiculo` AS `parte_vehiculo`,`ir`.`descripcion` AS `descripcion`,`ir`.`precio_costo` AS `precio_costo`,`ir`.`precio_venta` AS `precio_venta`,`ir`.`precio_mayoreo` AS `precio_mayoreo`,`ir`.`formula_15` AS `formula_15`,`ir`.`formula_30` AS `formula_30`,`ir`.`estado` AS `estado`,`ir`.`codigo_ubicacion` AS `codigo_ubicacion`,concat(`vvc`.`marca`,' ',`vvc`.`modelo`,' ',`vvc`.`generacion`) AS `vehiculo_origen`,`vvc`.`anio` AS `anio_vehiculo`,`ir`.`anio_registro` AS `anio_registro`,`ir`.`mes_registro` AS `mes_registro`,to_days(curdate()) - to_days(cast(`ir`.`fecha_creacion` as date)) AS `dias_en_inventario`,case when `ir`.`precio_venta` > `ir`.`precio_costo` * 2 then 'Alto Margen' when `ir`.`precio_venta` > `ir`.`precio_costo` * 1.5 then 'Margen Medio' when `ir`.`precio_venta` > `ir`.`precio_costo` * 1.2 then 'Margen Bajo' else 'Sin Margen' end AS `clasificacion_margen`,case when to_days(curdate()) - to_days(cast(`ir`.`fecha_creacion` as date)) > 365 then 'Inventario Lento' when to_days(curdate()) - to_days(cast(`ir`.`fecha_creacion` as date)) > 180 then 'Inventario Medio' else 'Inventario RÃ¡pido' end AS `clasificacion_rotacion` from ((`sistema_vehicular`.`inventario_repuestos` `ir` left join `sistema_vehicular`.`vehiculos` `v` on(`ir`.`vehiculo_origen_id` = `v`.`id`)) left join `sistema_vehicular`.`vista_vehiculos_completa` `vvc` on(`v`.`id` = `vvc`.`id`)) where `ir`.`estado` = 'STOCK' order by to_days(curdate()) - to_days(cast(`ir`.`fecha_creacion` as date)) desc"));
    }

    /**
     * Create an aliased <code>sistema_vehicular.vista_inventario_critico</code>
     * table reference
     */
    public VistaInventarioCritico(String alias) {
        this(DSL.name(alias), VISTA_INVENTARIO_CRITICO);
    }

    /**
     * Create an aliased <code>sistema_vehicular.vista_inventario_critico</code>
     * table reference
     */
    public VistaInventarioCritico(Name alias) {
        this(alias, VISTA_INVENTARIO_CRITICO);
    }

    /**
     * Create a <code>sistema_vehicular.vista_inventario_critico</code> table
     * reference
     */
    public VistaInventarioCritico() {
        this(DSL.name("vista_inventario_critico"), null);
    }

    public <O extends Record> VistaInventarioCritico(Table<O> child, ForeignKey<O, VistaInventarioCriticoRecord> key) {
        super(child, key, VISTA_INVENTARIO_CRITICO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaInventarioCritico as(String alias) {
        return new VistaInventarioCritico(DSL.name(alias), this);
    }

    @Override
    public VistaInventarioCritico as(Name alias) {
        return new VistaInventarioCritico(alias, this);
    }

    @Override
    public VistaInventarioCritico as(Table<?> alias) {
        return new VistaInventarioCritico(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaInventarioCritico rename(String name) {
        return new VistaInventarioCritico(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaInventarioCritico rename(Name name) {
        return new VistaInventarioCritico(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaInventarioCritico rename(Table<?> name) {
        return new VistaInventarioCritico(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, VistaInventarioCriticoParteVehiculo, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, VistaInventarioCriticoEstado, String, String, Integer, Short, Byte, Integer, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super String, ? super VistaInventarioCriticoParteVehiculo, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super VistaInventarioCriticoEstado, ? super String, ? super String, ? super Integer, ? super Short, ? super Byte, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super String, ? super VistaInventarioCriticoParteVehiculo, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super VistaInventarioCriticoEstado, ? super String, ? super String, ? super Integer, ? super Short, ? super Byte, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
