/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.Indexes;
import com.rodiejacontable.database.jooq.Keys;
import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.enums.VehiculosEstado;
import com.rodiejacontable.database.jooq.tables.records.VehiculosRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vehiculos extends TableImpl<VehiculosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sistema_vehicular.vehiculos</code>
     */
    public static final Vehiculos VEHICULOS = new Vehiculos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VehiculosRecord> getRecordType() {
        return VehiculosRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.vehiculos.id</code>.
     */
    public final TableField<VehiculosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.codigo_vehiculo</code>.
     */
    public final TableField<VehiculosRecord, String> CODIGO_VEHICULO = createField(DSL.name("codigo_vehiculo"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.generacion_id</code>.
     */
    public final TableField<VehiculosRecord, Integer> GENERACION_ID = createField(DSL.name("generacion_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.imagen_url</code>.
     */
    public final TableField<VehiculosRecord, String> IMAGEN_URL = createField(DSL.name("imagen_url"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.anio</code>.
     */
    public final TableField<VehiculosRecord, Integer> ANIO = createField(DSL.name("anio"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.precio_compra</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> PRECIO_COMPRA = createField(DSL.name("precio_compra"), SQLDataType.DECIMAL(12, 2).nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.costo_grua</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> COSTO_GRUA = createField(DSL.name("costo_grua"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.comisiones</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> COMISIONES = createField(DSL.name("comisiones"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.inversion_total</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> INVERSION_TOTAL = createField(DSL.name("inversion_total"), SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.costo_recuperado</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> COSTO_RECUPERADO = createField(DSL.name("costo_recuperado"), SQLDataType.DECIMAL(12, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.costo_pendiente</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> COSTO_PENDIENTE = createField(DSL.name("costo_pendiente"), SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_ingreso</code>.
     */
    public final TableField<VehiculosRecord, LocalDate> FECHA_INGRESO = createField(DSL.name("fecha_ingreso"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.estado</code>.
     */
    public final TableField<VehiculosRecord, VehiculosEstado> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("'DISPONIBLE'"), SQLDataType.VARCHAR)).asEnumDataType(com.rodiejacontable.database.jooq.enums.VehiculosEstado.class), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.precio_venta</code>.
     */
    public final TableField<VehiculosRecord, BigDecimal> PRECIO_VENTA = createField(DSL.name("precio_venta"), SQLDataType.DECIMAL(12, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_venta</code>.
     */
    public final TableField<VehiculosRecord, LocalDate> FECHA_VENTA = createField(DSL.name("fecha_venta"), SQLDataType.LOCALDATE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.activo</code>.
     */
    public final TableField<VehiculosRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.notas</code>.
     */
    public final TableField<VehiculosRecord, String> NOTAS = createField(DSL.name("notas"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_creacion</code>.
     */
    public final TableField<VehiculosRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sistema_vehicular.vehiculos.fecha_actualizacion</code>.
     */
    public final TableField<VehiculosRecord, LocalDateTime> FECHA_ACTUALIZACION = createField(DSL.name("fecha_actualizacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Vehiculos(Name alias, Table<VehiculosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vehiculos(Name alias, Table<VehiculosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sistema_vehicular.vehiculos</code> table
     * reference
     */
    public Vehiculos(String alias) {
        this(DSL.name(alias), VEHICULOS);
    }

    /**
     * Create an aliased <code>sistema_vehicular.vehiculos</code> table
     * reference
     */
    public Vehiculos(Name alias) {
        this(alias, VEHICULOS);
    }

    /**
     * Create a <code>sistema_vehicular.vehiculos</code> table reference
     */
    public Vehiculos() {
        this(DSL.name("vehiculos"), null);
    }

    public <O extends Record> Vehiculos(Table<O> child, ForeignKey<O, VehiculosRecord> key) {
        super(child, key, VEHICULOS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VEHICULOS_IDX_ANIO, Indexes.VEHICULOS_IDX_ESTADO, Indexes.VEHICULOS_IDX_FECHA_INGRESO, Indexes.VEHICULOS_IDX_GENERACION_ACTIVO);
    }

    @Override
    public Identity<VehiculosRecord, Integer> getIdentity() {
        return (Identity<VehiculosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VehiculosRecord> getPrimaryKey() {
        return Keys.KEY_VEHICULOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<VehiculosRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_VEHICULOS_CODIGO_VEHICULO);
    }

    @Override
    public List<ForeignKey<VehiculosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEHICULOS_IBFK_1);
    }

    private transient Generaciones _generaciones;

    /**
     * Get the implicit join path to the
     * <code>sistema_vehicular.generaciones</code> table.
     */
    public Generaciones generaciones() {
        if (_generaciones == null)
            _generaciones = new Generaciones(this, Keys.VEHICULOS_IBFK_1);

        return _generaciones;
    }

    @Override
    public Vehiculos as(String alias) {
        return new Vehiculos(DSL.name(alias), this);
    }

    @Override
    public Vehiculos as(Name alias) {
        return new Vehiculos(alias, this);
    }

    @Override
    public Vehiculos as(Table<?> alias) {
        return new Vehiculos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehiculos rename(String name) {
        return new Vehiculos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehiculos rename(Name name) {
        return new Vehiculos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vehiculos rename(Table<?> name) {
        return new Vehiculos(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, String, Integer, String, Integer, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDate, VehiculosEstado, BigDecimal, LocalDate, Byte, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Integer, ? super String, ? super Integer, ? super String, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super LocalDate, ? super VehiculosEstado, ? super BigDecimal, ? super LocalDate, ? super Byte, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Integer, ? super String, ? super Integer, ? super String, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super LocalDate, ? super VehiculosEstado, ? super BigDecimal, ? super LocalDate, ? super Byte, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
