/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.tables.records.VistaAuditoriaCompletaRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaAuditoriaCompleta extends TableImpl<VistaAuditoriaCompletaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_auditoria_completa</code>
     */
    public static final VistaAuditoriaCompleta VISTA_AUDITORIA_COMPLETA = new VistaAuditoriaCompleta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaAuditoriaCompletaRecord> getRecordType() {
        return VistaAuditoriaCompletaRecord.class;
    }

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.tipo_entidad</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> TIPO_ENTIDAD = createField(DSL.name("tipo_entidad"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.entidad_id</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> ENTIDAD_ID = createField(DSL.name("entidad_id"), SQLDataType.VARCHAR(15).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.codigo_entidad</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> CODIGO_ENTIDAD = createField(DSL.name("codigo_entidad"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.descripcion_entidad</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> DESCRIPCION_ENTIDAD = createField(DSL.name("descripcion_entidad"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.accion</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> ACCION = createField(DSL.name("accion"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.campo_modificado</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> CAMPO_MODIFICADO = createField(DSL.name("campo_modificado"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.valor_anterior</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> VALOR_ANTERIOR = createField(DSL.name("valor_anterior"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.valor_nuevo</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> VALOR_NUEVO = createField(DSL.name("valor_nuevo"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.usuario</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> USUARIO = createField(DSL.name("usuario"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.fecha_cambio</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, LocalDateTime> FECHA_CAMBIO = createField(DSL.name("fecha_cambio"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_auditoria_completa.observaciones</code>.
     */
    public final TableField<VistaAuditoriaCompletaRecord, String> OBSERVACIONES = createField(DSL.name("observaciones"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    private VistaAuditoriaCompleta(Name alias, Table<VistaAuditoriaCompletaRecord> aliased) {
        this(alias, aliased, null);
    }

    private VistaAuditoriaCompleta(Name alias, Table<VistaAuditoriaCompletaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_auditoria_completa` as select 'Vehículo' AS `tipo_entidad`,concat('ID: ',`hv`.`vehiculo_id`) AS `entidad_id`,`vvc`.`codigo_vehiculo` AS `codigo_entidad`,concat(`vvc`.`marca`,' ',`vvc`.`modelo`,' ',`vvc`.`generacion`) AS `descripcion_entidad`,`hv`.`accion` AS `accion`,`hv`.`campo_modificado` AS `campo_modificado`,`hv`.`valor_anterior` AS `valor_anterior`,`hv`.`valor_nuevo` AS `valor_nuevo`,`hv`.`usuario` AS `usuario`,`hv`.`fecha_cambio` AS `fecha_cambio`,`hv`.`observaciones` AS `observaciones` from (`sistema_vehicular`.`historial_vehiculos` `hv` left join `sistema_vehicular`.`vista_vehiculos_completa` `vvc` on(`hv`.`vehiculo_id` = `vvc`.`id`)) union all select 'Repuesto' AS `tipo_entidad`,concat('ID: ',`hr`.`repuesto_id`) AS `entidad_id`,`vic`.`codigo_repuesto` AS `codigo_entidad`,concat(`vic`.`parte_vehiculo`,' - ',coalesce(`vic`.`descripcion`,'Sin descripción'),' (de ',coalesce(`vic`.`codigo_vehiculo`,'sin vehículo'),')') AS `descripcion_entidad`,`hr`.`accion` AS `accion`,`hr`.`campo_modificado` AS `campo_modificado`,`hr`.`valor_anterior` AS `valor_anterior`,`hr`.`valor_nuevo` AS `valor_nuevo`,`hr`.`usuario` AS `usuario`,`hr`.`fecha_cambio` AS `fecha_cambio`,`hr`.`observaciones` AS `observaciones` from (`sistema_vehicular`.`historial_repuestos` `hr` left join `sistema_vehicular`.`vista_inventario_completo` `vic` on(`hr`.`repuesto_id` = `vic`.`id`)) union all select 'Transacción' AS `tipo_entidad`,concat('ID: ',`ht`.`transaccion_id`) AS `entidad_id`,`vtc`.`codigo_transaccion` AS `codigo_entidad`,concat(`vtc`.`tipo_transaccion`,' - $',`vtc`.`monto`,case when `vtc`.`codigo_vehiculo` is not null then concat(' (Vehículo: ',`vtc`.`codigo_vehiculo`,')') when `vtc`.`codigo_repuesto` is not null then concat(' (Repuesto: ',`vtc`.`codigo_repuesto`,')') else '' end) AS `descripcion_entidad`,`ht`.`accion` AS `accion`,`ht`.`campo_modificado` AS `campo_modificado`,`ht`.`valor_anterior` AS `valor_anterior`,`ht`.`valor_nuevo` AS `valor_nuevo`,`ht`.`usuario` AS `usuario`,`ht`.`fecha_cambio` AS `fecha_cambio`,`ht`.`observaciones` AS `observaciones` from (`sistema_vehicular`.`historial_transacciones` `ht` left join `sistema_vehicular`.`vista_transacciones_completas` `vtc` on(`ht`.`transaccion_id` = `vtc`.`id`)) order by `fecha_cambio` desc"));
    }

    /**
     * Create an aliased <code>sistema_vehicular.vista_auditoria_completa</code>
     * table reference
     */
    public VistaAuditoriaCompleta(String alias) {
        this(DSL.name(alias), VISTA_AUDITORIA_COMPLETA);
    }

    /**
     * Create an aliased <code>sistema_vehicular.vista_auditoria_completa</code>
     * table reference
     */
    public VistaAuditoriaCompleta(Name alias) {
        this(alias, VISTA_AUDITORIA_COMPLETA);
    }

    /**
     * Create a <code>sistema_vehicular.vista_auditoria_completa</code> table
     * reference
     */
    public VistaAuditoriaCompleta() {
        this(DSL.name("vista_auditoria_completa"), null);
    }

    public <O extends Record> VistaAuditoriaCompleta(Table<O> child, ForeignKey<O, VistaAuditoriaCompletaRecord> key) {
        super(child, key, VISTA_AUDITORIA_COMPLETA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaAuditoriaCompleta as(String alias) {
        return new VistaAuditoriaCompleta(DSL.name(alias), this);
    }

    @Override
    public VistaAuditoriaCompleta as(Name alias) {
        return new VistaAuditoriaCompleta(alias, this);
    }

    @Override
    public VistaAuditoriaCompleta as(Table<?> alias) {
        return new VistaAuditoriaCompleta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaAuditoriaCompleta rename(String name) {
        return new VistaAuditoriaCompleta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaAuditoriaCompleta rename(Name name) {
        return new VistaAuditoriaCompleta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaAuditoriaCompleta rename(Table<?> name) {
        return new VistaAuditoriaCompleta(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, String, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
