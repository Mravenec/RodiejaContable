/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.Keys;
import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.tables.records.ModelosRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Modelos extends TableImpl<ModelosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sistema_vehicular.modelos</code>
     */
    public static final Modelos MODELOS = new Modelos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelosRecord> getRecordType() {
        return ModelosRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.modelos.id</code>.
     */
    public final TableField<ModelosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.modelos.marca_id</code>.
     */
    public final TableField<ModelosRecord, Integer> MARCA_ID = createField(DSL.name("marca_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.modelos.nombre</code>.
     */
    public final TableField<ModelosRecord, String> NOMBRE = createField(DSL.name("nombre"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>sistema_vehicular.modelos.activo</code>.
     */
    public final TableField<ModelosRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sistema_vehicular.modelos.fecha_creacion</code>.
     */
    public final TableField<ModelosRecord, LocalDateTime> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Modelos(Name alias, Table<ModelosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Modelos(Name alias, Table<ModelosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sistema_vehicular.modelos</code> table reference
     */
    public Modelos(String alias) {
        this(DSL.name(alias), MODELOS);
    }

    /**
     * Create an aliased <code>sistema_vehicular.modelos</code> table reference
     */
    public Modelos(Name alias) {
        this(alias, MODELOS);
    }

    /**
     * Create a <code>sistema_vehicular.modelos</code> table reference
     */
    public Modelos() {
        this(DSL.name("modelos"), null);
    }

    public <O extends Record> Modelos(Table<O> child, ForeignKey<O, ModelosRecord> key) {
        super(child, key, MODELOS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public Identity<ModelosRecord, Integer> getIdentity() {
        return (Identity<ModelosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModelosRecord> getPrimaryKey() {
        return Keys.KEY_MODELOS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ModelosRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MODELOS_UNIQUE_MARCA_MODELO);
    }

    @Override
    public List<ForeignKey<ModelosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODELOS_IBFK_1);
    }

    private transient Marcas _marcas;

    /**
     * Get the implicit join path to the <code>sistema_vehicular.marcas</code>
     * table.
     */
    public Marcas marcas() {
        if (_marcas == null)
            _marcas = new Marcas(this, Keys.MODELOS_IBFK_1);

        return _marcas;
    }

    @Override
    public Modelos as(String alias) {
        return new Modelos(DSL.name(alias), this);
    }

    @Override
    public Modelos as(Name alias) {
        return new Modelos(alias, this);
    }

    @Override
    public Modelos as(Table<?> alias) {
        return new Modelos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Modelos rename(String name) {
        return new Modelos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Modelos rename(Name name) {
        return new Modelos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Modelos rename(Table<?> name) {
        return new Modelos(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Byte, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super String, ? super Byte, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super String, ? super Byte, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
