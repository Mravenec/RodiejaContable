/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.Keys;
import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.enums.TiposTransaccionesCategoria;
import com.rodiejacontable.database.jooq.tables.records.TiposTransaccionesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TiposTransacciones extends TableImpl<TiposTransaccionesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.tipos_transacciones</code>
     */
    public static final TiposTransacciones TIPOS_TRANSACCIONES = new TiposTransacciones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TiposTransaccionesRecord> getRecordType() {
        return TiposTransaccionesRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.tipos_transacciones.id</code>.
     */
    public final TableField<TiposTransaccionesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sistema_vehicular.tipos_transacciones.nombre</code>.
     */
    public final TableField<TiposTransaccionesRecord, String> NOMBRE = createField(DSL.name("nombre"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.tipos_transacciones.descripcion</code>.
     */
    public final TableField<TiposTransaccionesRecord, String> DESCRIPCION = createField(DSL.name("descripcion"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>sistema_vehicular.tipos_transacciones.categoria</code>.
     */
    public final TableField<TiposTransaccionesRecord, TiposTransaccionesCategoria> CATEGORIA = createField(DSL.name("categoria"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(com.rodiejacontable.database.jooq.enums.TiposTransaccionesCategoria.class), this, "");

    /**
     * The column <code>sistema_vehicular.tipos_transacciones.activo</code>.
     */
    public final TableField<TiposTransaccionesRecord, Byte> ACTIVO = createField(DSL.name("activo"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    private TiposTransacciones(Name alias, Table<TiposTransaccionesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TiposTransacciones(Name alias, Table<TiposTransaccionesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sistema_vehicular.tipos_transacciones</code>
     * table reference
     */
    public TiposTransacciones(String alias) {
        this(DSL.name(alias), TIPOS_TRANSACCIONES);
    }

    /**
     * Create an aliased <code>sistema_vehicular.tipos_transacciones</code>
     * table reference
     */
    public TiposTransacciones(Name alias) {
        this(alias, TIPOS_TRANSACCIONES);
    }

    /**
     * Create a <code>sistema_vehicular.tipos_transacciones</code> table
     * reference
     */
    public TiposTransacciones() {
        this(DSL.name("tipos_transacciones"), null);
    }

    public <O extends Record> TiposTransacciones(Table<O> child, ForeignKey<O, TiposTransaccionesRecord> key) {
        super(child, key, TIPOS_TRANSACCIONES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public Identity<TiposTransaccionesRecord, Integer> getIdentity() {
        return (Identity<TiposTransaccionesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TiposTransaccionesRecord> getPrimaryKey() {
        return Keys.KEY_TIPOS_TRANSACCIONES_PRIMARY;
    }

    @Override
    public List<UniqueKey<TiposTransaccionesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TIPOS_TRANSACCIONES_NOMBRE);
    }

    @Override
    public TiposTransacciones as(String alias) {
        return new TiposTransacciones(DSL.name(alias), this);
    }

    @Override
    public TiposTransacciones as(Name alias) {
        return new TiposTransacciones(alias, this);
    }

    @Override
    public TiposTransacciones as(Table<?> alias) {
        return new TiposTransacciones(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TiposTransacciones rename(String name) {
        return new TiposTransacciones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TiposTransacciones rename(Name name) {
        return new TiposTransacciones(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TiposTransacciones rename(Table<?> name) {
        return new TiposTransacciones(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, TiposTransaccionesCategoria, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super TiposTransaccionesCategoria, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super TiposTransaccionesCategoria, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
