/*
 * This file is generated by jOOQ.
 */
package com.rodiejacontable.database.jooq.tables;


import com.rodiejacontable.database.jooq.SistemaVehicular;
import com.rodiejacontable.database.jooq.enums.VistaInventarioCompletoEstado;
import com.rodiejacontable.database.jooq.enums.VistaInventarioCompletoParteVehiculo;
import com.rodiejacontable.database.jooq.tables.records.VistaInventarioCompletoRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VistaInventarioCompleto extends TableImpl<VistaInventarioCompletoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>sistema_vehicular.vista_inventario_completo</code>
     */
    public static final VistaInventarioCompleto VISTA_INVENTARIO_COMPLETO = new VistaInventarioCompleto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VistaInventarioCompletoRecord> getRecordType() {
        return VistaInventarioCompletoRecord.class;
    }

    /**
     * The column <code>sistema_vehicular.vista_inventario_completo.id</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.codigo_repuesto</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> CODIGO_REPUESTO = createField(DSL.name("codigo_repuesto"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.codigo_ubicacion</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> CODIGO_UBICACION = createField(DSL.name("codigo_ubicacion"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.parte_vehiculo</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, VistaInventarioCompletoParteVehiculo> PARTE_VEHICULO = createField(DSL.name("parte_vehiculo"), SQLDataType.VARCHAR(28).nullable(false).asEnumDataType(com.rodiejacontable.database.jooq.enums.VistaInventarioCompletoParteVehiculo.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.descripcion</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> DESCRIPCION = createField(DSL.name("descripcion"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.precio_costo</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, BigDecimal> PRECIO_COSTO = createField(DSL.name("precio_costo"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.precio_venta</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, BigDecimal> PRECIO_VENTA = createField(DSL.name("precio_venta"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.precio_mayoreo</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, BigDecimal> PRECIO_MAYOREO = createField(DSL.name("precio_mayoreo"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.formula_15</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, BigDecimal> FORMULA_15 = createField(DSL.name("formula_15"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.formula_30</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, BigDecimal> FORMULA_30 = createField(DSL.name("formula_30"), SQLDataType.DECIMAL(10, 2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.estado</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, VistaInventarioCompletoEstado> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR(13).defaultValue(DSL.field(DSL.raw("'STOCK'"), SQLDataType.VARCHAR)).asEnumDataType(com.rodiejacontable.database.jooq.enums.VistaInventarioCompletoEstado.class), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.anio_registro</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, Short> ANIO_REGISTRO = createField(DSL.name("anio_registro"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.mes_registro</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, Byte> MES_REGISTRO = createField(DSL.name("mes_registro"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.codigo_vehiculo</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> CODIGO_VEHICULO = createField(DSL.name("codigo_vehiculo"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.marca</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> MARCA = createField(DSL.name("marca"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.modelo</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> MODELO = createField(DSL.name("modelo"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.generacion</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> GENERACION = createField(DSL.name("generacion"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.anio_vehiculo</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, Integer> ANIO_VEHICULO = createField(DSL.name("anio_vehiculo"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>sistema_vehicular.vista_inventario_completo.clave_generacion</code>.
     */
    public final TableField<VistaInventarioCompletoRecord, String> CLAVE_GENERACION = createField(DSL.name("clave_generacion"), SQLDataType.VARCHAR(202).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private VistaInventarioCompleto(Name alias, Table<VistaInventarioCompletoRecord> aliased) {
        this(alias, aliased, null);
    }

    private VistaInventarioCompleto(Name alias, Table<VistaInventarioCompletoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `vista_inventario_completo` as select `ir`.`id` AS `id`,`ir`.`codigo_repuesto` AS `codigo_repuesto`,`ir`.`codigo_ubicacion` AS `codigo_ubicacion`,`ir`.`parte_vehiculo` AS `parte_vehiculo`,`ir`.`descripcion` AS `descripcion`,`ir`.`precio_costo` AS `precio_costo`,`ir`.`precio_venta` AS `precio_venta`,`ir`.`precio_mayoreo` AS `precio_mayoreo`,`ir`.`formula_15` AS `formula_15`,`ir`.`formula_30` AS `formula_30`,`ir`.`estado` AS `estado`,`ir`.`anio_registro` AS `anio_registro`,`ir`.`mes_registro` AS `mes_registro`,`v`.`codigo_vehiculo` AS `codigo_vehiculo`,`vvc`.`marca` AS `marca`,`vvc`.`modelo` AS `modelo`,`vvc`.`generacion` AS `generacion`,`vvc`.`anio` AS `anio_vehiculo`,`vvc`.`clave_generacion` AS `clave_generacion` from ((`sistema_vehicular`.`inventario_repuestos` `ir` left join `sistema_vehicular`.`vehiculos` `v` on(`ir`.`vehiculo_origen_id` = `v`.`id`)) left join `sistema_vehicular`.`vista_vehiculos_completa` `vvc` on(`v`.`id` = `vvc`.`id`))"));
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_inventario_completo</code> table reference
     */
    public VistaInventarioCompleto(String alias) {
        this(DSL.name(alias), VISTA_INVENTARIO_COMPLETO);
    }

    /**
     * Create an aliased
     * <code>sistema_vehicular.vista_inventario_completo</code> table reference
     */
    public VistaInventarioCompleto(Name alias) {
        this(alias, VISTA_INVENTARIO_COMPLETO);
    }

    /**
     * Create a <code>sistema_vehicular.vista_inventario_completo</code> table
     * reference
     */
    public VistaInventarioCompleto() {
        this(DSL.name("vista_inventario_completo"), null);
    }

    public <O extends Record> VistaInventarioCompleto(Table<O> child, ForeignKey<O, VistaInventarioCompletoRecord> key) {
        super(child, key, VISTA_INVENTARIO_COMPLETO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SistemaVehicular.SISTEMA_VEHICULAR;
    }

    @Override
    public VistaInventarioCompleto as(String alias) {
        return new VistaInventarioCompleto(DSL.name(alias), this);
    }

    @Override
    public VistaInventarioCompleto as(Name alias) {
        return new VistaInventarioCompleto(alias, this);
    }

    @Override
    public VistaInventarioCompleto as(Table<?> alias) {
        return new VistaInventarioCompleto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaInventarioCompleto rename(String name) {
        return new VistaInventarioCompleto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaInventarioCompleto rename(Name name) {
        return new VistaInventarioCompleto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VistaInventarioCompleto rename(Table<?> name) {
        return new VistaInventarioCompleto(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, String, String, VistaInventarioCompletoParteVehiculo, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, VistaInventarioCompletoEstado, Short, Byte, String, String, String, String, Integer, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super Integer, ? super String, ? super String, ? super VistaInventarioCompletoParteVehiculo, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super VistaInventarioCompletoEstado, ? super Short, ? super Byte, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super Integer, ? super String, ? super String, ? super VistaInventarioCompletoParteVehiculo, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super VistaInventarioCompletoEstado, ? super Short, ? super Byte, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
